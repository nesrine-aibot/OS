The fork() function creates a new process that is a duplicate of the current process. Both the parent and the child processes continue execution from the line immediately after the fork() call. This includes any assignments made after the fork() call.

The critical point is that the return value of fork() differs between the parent and child processes. In the parent process, it's the PID of the child, and in the child process, it's 0. The assignment (child1 = fork();) takes place after fork() has been executed, and the value assigned to child1 depends on whether it's the parent or the child process.

So, after the fork() call:

In the parent process, child1 will hold the PID of the child.
In the child process, child1 will be 0.
This distinction is crucial for branching your code to perform different actions based on whether it's the parent or child process.



example : 


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    int num1 = 5;
    int num2 = 7;

    pid_t child1, child2;
    int status1, status2;
    int result1, result2, finalResult;

    // Create first child process
    child1 = fork();

    if (child1 < 0) {
        fprintf(stderr, "Fork failed\n");
        return 1;
    } else if (child1 == 0) {
        // Code executed by the first child process
        result1 = num1 + 1;  // Partial computation
        exit(result1);
    } else {
        // Code executed by the parent process

        // Create second child process
        child2 = fork();

        if (child2 < 0) {
            fprintf(stderr, "Fork failed\n");
            return 1;
        } else if (child2 == 0) {
            // Code executed by the second child process
            result2 = num2 + 2;  // Partial computation
            exit(result2);
        } else {
            // Code executed by the parent process

            // Wait for the children to finish
            waitpid(child1, &status1, 0);
            waitpid(child2, &status2, 0);

            // Check if children exited normally
            if (WIFEXITED(status1) && WIFEXITED(status2)) {
                // Retrieve the results from the children
                result1 = WEXITSTATUS(status1);
                result2 = WEXITSTATUS(status2);

                // Combine the results
                finalResult = result1 + result2;

                // Output the final result
                printf("Result: %d\n", finalResult);
            } else {
                fprintf(stderr, "Child process did not exit normally\n");
                return 1;
            }
        }
    }

    return 0;
}
